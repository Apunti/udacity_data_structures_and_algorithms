I used recursion to solve this problem.
We assume that the input_list is a list of int, we will not check this
case, but we will check if the number is an integer.

Algorithm:

The main idea of the algorithm is to consider an interval of indices where
the number can we found, and to reduce by half this interval in each
iteration. As it's a rotated array, first we must compare the number with
the first value of the list to know where the number is. It could work
as well if instead of taking the indices, we could be taking slices of the
original list. Either way, the time efficiency will be the same.

Time efficiency:

As the interval is reduced in half in each iteration, the time complexity
of the algorithm is O(log n), where n is the length of the input_list.

Space complexity:

The space is O(n), we always use the same input list, of length n.

Data structure:

No data structure choice
