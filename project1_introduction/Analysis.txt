For the run time analysis I won't take into consideration the time that it takes
to read the file, only the solution that is required.

Task 0:
O(1), there's no loop or anything dependent on the input.

Task 1:
O(n), there are two independent for loops, so it will be linear.

Task 2:
O(n^2), there's a for loop, and inside a loop, we look if a key it's in the dict,
the worst case scenario would be to loop through all the keys in the dictionary,
so it will be O(n). Therefore, the program will quadratic.

Task 3:
O(n + n logn), as before, there's a for loop, but we also have the sort method,
which in both the worst case scenario and the average case scenario is O(n logn).
Therefore, when n gets bigger, the program will be O(n log n).

Task 4:
O(n + n logn), there are three independent for loops and there's the sort method as before.
So the same argument given on task 3 is valid in this one. Therefore, when n gets bigger,
the program will be O(n logn).
